{"ast":null,"code":"import { of } from 'rxjs';\nimport { PrmFormBase } from 'src/app/Model/Platform/prm-form-base';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Service/BusinessService/location.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../../Platform/prm-dynamic-form/prm-dynamic-form.component\";\n\nfunction MainComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"div\", 1);\n    i0.ɵɵelementStart(1, \"app-dynamic-form\", 2);\n    i0.ɵɵlistener(\"formOutput\", function MainComponent_div_0_Template_app_dynamic_form_formOutput_1_listener($event) {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r1 = i0.ɵɵnextContext();\n      return ctx_r1.onSubmit($event);\n    });\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"questions\", ctx_r0.baseQuestions);\n  }\n}\n\nexport class MainComponent {\n  constructor(locationService) {\n    // this.baseQuestions = this.customerFormBuild();\n    //this.baseQuestions = this.companyFormBuild();\n    this.locationService = locationService;\n    this.baseQuestions = [];\n    this.countryValues = [];\n    this.cityValues = [];\n    this.loadCountryData();\n  }\n\n  ngOnInit() {}\n\n  customerFormBuild() {\n    let customerFormArray = [new PrmFormBase({\n      label: \"Como quer ser chamado(a)?\",\n      key: \"to_be_called\",\n      type: \"select\",\n      options: [{\n        key: \"Sr.\",\n        value: \"sr\"\n      }, {\n        key: \"Sra.\",\n        value: \"sra\"\n      }],\n      required: true,\n      size: 12,\n      order: 1\n    }), new PrmFormBase({\n      label: \"CPF\",\n      key: \"personal_number\",\n      type: \"text\",\n      mask: \"000.000.000-00\",\n      inputMode: \"number\",\n      required: true,\n      size: 12,\n      order: 2\n    }), new PrmFormBase({\n      label: \"Data de aniversário\",\n      key: \"birthdate\",\n      type: \"text\",\n      inputMode: \"number\",\n      mask: \"00/00/0000\",\n      required: true,\n      size: 12,\n      order: 3\n    }), new PrmFormBase({\n      label: \"Contato\",\n      key: \"phone\",\n      type: \"text\",\n      inputMode: \"number\",\n      mask: \"(00) 00000-0000||(00) 0000-0000\",\n      required: true,\n      size: 12,\n      order: 4\n    }), new PrmFormBase({\n      label: \"Informações de entrega/retirada\",\n      key: \"address\",\n      type: \"nestedFormGroup\",\n      size: 12,\n      order: 5,\n      nestedQuestions: [new PrmFormBase({\n        label: \"CEP\",\n        key: \"zip_code\",\n        type: \"text\",\n        inputMode: \"number\",\n        mask: \"00000-000\",\n        required: true,\n        order: 1,\n        size: 12\n      }), new PrmFormBase({\n        label: \"Endereço\",\n        key: \"street\",\n        type: \"text\",\n        required: true,\n        order: 2,\n        size: 12\n      }), new PrmFormBase({\n        label: \"Estado\",\n        key: \"state\",\n        type: \"select\",\n        options: this.countryValues,\n        required: true,\n        order: 3,\n        size: 4\n      }), new PrmFormBase({\n        label: \"Cidade\",\n        key: \"city\",\n        type: \"select\",\n        options: this.cityValues,\n        required: true,\n        order: 4,\n        size: 8\n      })]\n    })];\n    return of(customerFormArray);\n  } // companyFormBuild(): PrmFormBase<any>[] {\n  //   let companyFormArray: PrmFormBase<any>[] = [\n  //     new PrmFormBase({\n  //       label: \"Nome fantasia\",\n  //       key: \"name\",\n  //       type: \"text\",\n  //       required: true,\n  //       size: 12,\n  //       order: 1\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Razão social\",\n  //       key: \"internal_name\",\n  //       type: \"text\",\n  //       required: true,\n  //       size: 12,\n  //       order: 2\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Slogan\",\n  //       key: \"short_description\",\n  //       type: \"text\",\n  //       required: true,\n  //       size: 12,\n  //       order: 3\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Descrição da empresa\",\n  //       key: \"description\",\n  //       type: \"text\",\n  //       required: true,\n  //       size: 12,\n  //       order: 4\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Tipo de serviço\",\n  //       key: \"service_type\",\n  //       type: \"text\",\n  //       required: true,\n  //       size: 12,\n  //       order: 5\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Contato\",\n  //       key: \"phone\",\n  //       type: \"text\",\n  //       mask: \"(00) 00000-0000||(00) 0000-0000\",\n  //       inputMode: \"number\",\n  //       required: true,\n  //       size: 12,\n  //       order: 6\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Data de fundação\",\n  //       key: \"foundation_date\",\n  //       type: \"text\",\n  //       mask: \"00/00/0000\",\n  //       inputMode: \"number\",\n  //       required: true,\n  //       size: 12,\n  //       order: 7\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"CNPJ\",\n  //       key: \"registered_number\",\n  //       type: \"text\",\n  //       mask: \"CPF_CNPJ\",\n  //       inputMode: \"number\",\n  //       required: true,\n  //       size: 12,\n  //       order: 8\n  //     }),\n  //     new PrmFormBase({ //FormGroup / address\n  //       label: \"Endereço\",\n  //       key: \"address\",\n  //       type: \"nestedFormGroup\",\n  //       size: 12,\n  //       order: 9,\n  //       nestedQuestions: [\n  //         new PrmFormBase({ //zip_code\n  //           label: \"CEP\",\n  //           key: \"zip_code\",\n  //           type: \"text\",\n  //           inputMode: \"number\",\n  //           mask: \"00000-000\",\n  //           required: true,\n  //           order: 1,\n  //           size: 12\n  //         }),\n  //         new PrmFormBase({ //street\n  //           label: \"Endereço\",\n  //           key: \"street\",\n  //           type: \"text\",\n  //           required: true,\n  //           order: 2,\n  //           size: 12\n  //         }),\n  //         new PrmFormBase({ //state\n  //           label: \"Estado\",\n  //           key: \"state\",\n  //           type: \"select\",\n  //           options: [{ key: \"bla\", value: \"blabla\" }],\n  //           required: true,\n  //           order: 3,\n  //           size: 4,\n  //         }),\n  //         new PrmFormBase({ //city\n  //           label: \"Cidade\",\n  //           key: \"city\",\n  //           type: \"select\",\n  //           options: [\n  //             {\n  //               key: \"Jaraguá do Sul\",\n  //               value: \"jgua\"\n  //             },\n  //             {\n  //               key: \"Capanema\",\n  //               value: \"capanema\"\n  //             }\n  //           ],\n  //           required: true,\n  //           order: 4,\n  //           size: 8\n  //         }),\n  //       ]\n  //     }),\n  //     new PrmFormBase({ //FormGroup / delivery_info\n  //       label: \"Entrega\",\n  //       key: \"delivery_info\",\n  //       type: \"nestedFormGroup\",\n  //       size: 12,\n  //       order: 10,\n  //       nestedQuestions: [\n  //         new PrmFormBase({ //delivery_tax\n  //           label: \"Taxa de entrega (região)\",\n  //           key: \"delivery_tax\",\n  //           type: \"number\",\n  //           required: true,\n  //           order: 1,\n  //           size: 12\n  //         }),\n  //         new PrmFormBase({ //min_delivery\n  //           label: \"Tempo minimo de entrega\",\n  //           key: \"min_delivery\",\n  //           type: \"number\",\n  //           required: true,\n  //           order: 2,\n  //           size: 6\n  //         }),\n  //         new PrmFormBase({ //max_delivery\n  //           label: \"Tempo maximo de entrega\",\n  //           key: \"max_delivery\",\n  //           type: \"number\",\n  //           required: true,\n  //           order: 3,\n  //           size: 6\n  //         })\n  //       ]\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"URL da logo da empresa\",\n  //       key: \"logo\",\n  //       type: \"text\",\n  //       inputMode: \"url\",\n  //       required: true,\n  //       size: 12,\n  //       order: 11\n  //     }),\n  //     new PrmFormBase({\n  //       label: \"Cor de fundo da logo\",\n  //       key: \"logo_bg\",\n  //       type: \"text\",\n  //       inputMode: \"url\",\n  //       required: true,\n  //       size: 12,\n  //       order: 12\n  //     })\n  //   ];\n  //   return companyFormArray;\n  // }\n\n\n  onSubmit(event) {\n    console.log(\">>> Form end: \");\n    console.log(event);\n  }\n\n  loadCountryData() {\n    // Set country values;\n    this.locationService.getBrazilCountry().subscribe(response => {\n      let countryArray = [];\n      let orderedArray = response.body;\n      orderedArray.sort((obj1, obj2) => {\n        if (obj1.nome > obj2.nome) {\n          return 1;\n        }\n\n        if (obj1.nome < obj2.nome) {\n          return -1;\n        }\n\n        return 0;\n      });\n      orderedArray.forEach(element => {\n        countryArray.push({\n          key: element.sigla,\n          value: element.nome\n        });\n      });\n      this.countryValues = countryArray;\n      this.loadCityFromCountryData(countryArray[0].key);\n    });\n  }\n\n  loadCityFromCountryData(sigla) {\n    this.locationService.getStateCity(sigla).subscribe(response => {\n      let cityArray = [];\n      let orderedArray = response.body;\n      orderedArray.sort((obj1, obj2) => {\n        if (obj1.nome > obj2.nome) {\n          return 1;\n        }\n\n        if (obj1.nome < obj2.nome) {\n          return -1;\n        }\n\n        return 0;\n      });\n      orderedArray.forEach(element => {\n        cityArray.push({\n          key: element.sigla,\n          value: element.nome\n        });\n      });\n      this.cityValues = cityArray;\n      this.baseQuestions = this.customerFormBuild();\n    });\n  }\n\n}\n\nMainComponent.ɵfac = function MainComponent_Factory(t) {\n  return new (t || MainComponent)(i0.ɵɵdirectiveInject(i1.LocationService));\n};\n\nMainComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: MainComponent,\n  selectors: [[\"app-main\"]],\n  decls: 2,\n  vars: 3,\n  consts: [[\"class\", \"container mt-5 m-auto\", 4, \"ngIf\"], [1, \"container\", \"mt-5\", \"m-auto\"], [3, \"questions\", \"formOutput\"]],\n  template: function MainComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, MainComponent_div_0_Template, 2, 1, \"div\", 0);\n      i0.ɵɵpipe(1, \"async\");\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(1, 1, ctx.baseQuestions));\n    }\n  },\n  directives: [i2.NgIf, i3.PrmDynamicFormComponent],\n  pipes: [i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJtYWluLmNvbXBvbmVudC5zY3NzIn0= */\"]\n});","map":{"version":3,"sources":["C:\\AngularComponents\\AngularDynamicComponents_Development\\src\\app\\Component\\BusinessComponent\\main\\main.component.ts","C:\\AngularComponents\\AngularDynamicComponents_Development\\src\\app\\Component\\BusinessComponent\\main\\main.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit } from '@angular/core';\r\nimport { of, Observable } from 'rxjs';\r\nimport { PrmFormBase } from 'src/app/Model/Platform/prm-form-base';\r\nimport { LocationService } from 'src/app/Service/BusinessService/location.service';\r\n\r\n@Component({\r\n  selector: 'app-main',\r\n  templateUrl: './main.component.html',\r\n  styleUrls: ['./main.component.scss']\r\n})\r\nexport class MainComponent implements OnInit {\r\n\r\n  baseQuestions: PrmFormBase<any>[] = [];\r\n  countryValues: { key: string, value: string }[] = [];\r\n  cityValues: { key: string, value: string }[] = [];\r\n\r\n  constructor(\r\n    public locationService: LocationService\r\n  ) {\r\n    // this.baseQuestions = this.customerFormBuild();\r\n    //this.baseQuestions = this.companyFormBuild();\r\n\r\n    this.loadCountryData();\r\n  }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n  customerFormBuild(): Observable<PrmFormBase<any>[]> {\r\n    let customerFormArray: PrmFormBase<any>[] = [\r\n      new PrmFormBase({ //to_be_called\r\n        label: \"Como quer ser chamado(a)?\",\r\n        key: \"to_be_called\",\r\n        type: \"select\",\r\n        options: [\r\n          {\r\n            key: \"Sr.\",\r\n            value: \"sr\"\r\n          },\r\n          {\r\n            key: \"Sra.\",\r\n            value: \"sra\"\r\n          }\r\n        ],\r\n        required: true,\r\n        size: 12,\r\n        order: 1\r\n      }),\r\n      new PrmFormBase({ //personal_number\r\n        label: \"CPF\",\r\n        key: \"personal_number\",\r\n        type: \"text\",\r\n        mask: \"000.000.000-00\",\r\n        inputMode: \"number\",\r\n        required: true,\r\n        size: 12,\r\n        order: 2\r\n      }),\r\n      new PrmFormBase({ //birthdate\r\n        label: \"Data de aniversário\",\r\n        key: \"birthdate\",\r\n        type: \"text\",\r\n        inputMode: \"number\",\r\n        mask: \"00/00/0000\",\r\n        required: true,\r\n        size: 12,\r\n        order: 3\r\n      }),\r\n      new PrmFormBase({ //phone\r\n        label: \"Contato\",\r\n        key: \"phone\",\r\n        type: \"text\",\r\n        inputMode: \"number\",\r\n        mask: \"(00) 00000-0000||(00) 0000-0000\",\r\n        required: true,\r\n        size: 12,\r\n        order: 4\r\n      }),\r\n      new PrmFormBase({ //FormGroup / address\r\n        label: \"Informações de entrega/retirada\",\r\n        key: \"address\",\r\n        type: \"nestedFormGroup\",\r\n        size: 12,\r\n        order: 5,\r\n        nestedQuestions: [\r\n          new PrmFormBase({ //zip_code\r\n            label: \"CEP\",\r\n            key: \"zip_code\",\r\n            type: \"text\",\r\n            inputMode: \"number\",\r\n            mask: \"00000-000\",\r\n            required: true,\r\n            order: 1,\r\n            size: 12\r\n          }),\r\n          new PrmFormBase({ //street\r\n            label: \"Endereço\",\r\n            key: \"street\",\r\n            type: \"text\",\r\n            required: true,\r\n            order: 2,\r\n            size: 12\r\n          }),\r\n          new PrmFormBase({ //state\r\n            label: \"Estado\",\r\n            key: \"state\",\r\n            type: \"select\",\r\n            options: this.countryValues,\r\n            required: true,\r\n            order: 3,\r\n            size: 4,\r\n          }),\r\n          new PrmFormBase({ //city\r\n            label: \"Cidade\",\r\n            key: \"city\",\r\n            type: \"select\",\r\n            options: this.cityValues,\r\n            required: true,\r\n            order: 4,\r\n            size: 8\r\n          }),\r\n        ]\r\n      })\r\n    ];\r\n\r\n    return of(customerFormArray);\r\n  }\r\n\r\n  // companyFormBuild(): PrmFormBase<any>[] {\r\n  //   let companyFormArray: PrmFormBase<any>[] = [\r\n  //     new PrmFormBase({\r\n  //       label: \"Nome fantasia\",\r\n  //       key: \"name\",\r\n  //       type: \"text\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 1\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Razão social\",\r\n  //       key: \"internal_name\",\r\n  //       type: \"text\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 2\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Slogan\",\r\n  //       key: \"short_description\",\r\n  //       type: \"text\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 3\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Descrição da empresa\",\r\n  //       key: \"description\",\r\n  //       type: \"text\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 4\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Tipo de serviço\",\r\n  //       key: \"service_type\",\r\n  //       type: \"text\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 5\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Contato\",\r\n  //       key: \"phone\",\r\n  //       type: \"text\",\r\n  //       mask: \"(00) 00000-0000||(00) 0000-0000\",\r\n  //       inputMode: \"number\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 6\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Data de fundação\",\r\n  //       key: \"foundation_date\",\r\n  //       type: \"text\",\r\n  //       mask: \"00/00/0000\",\r\n  //       inputMode: \"number\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 7\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"CNPJ\",\r\n  //       key: \"registered_number\",\r\n  //       type: \"text\",\r\n  //       mask: \"CPF_CNPJ\",\r\n  //       inputMode: \"number\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 8\r\n  //     }),\r\n  //     new PrmFormBase({ //FormGroup / address\r\n  //       label: \"Endereço\",\r\n  //       key: \"address\",\r\n  //       type: \"nestedFormGroup\",\r\n  //       size: 12,\r\n  //       order: 9,\r\n  //       nestedQuestions: [\r\n  //         new PrmFormBase({ //zip_code\r\n  //           label: \"CEP\",\r\n  //           key: \"zip_code\",\r\n  //           type: \"text\",\r\n  //           inputMode: \"number\",\r\n  //           mask: \"00000-000\",\r\n  //           required: true,\r\n  //           order: 1,\r\n  //           size: 12\r\n  //         }),\r\n  //         new PrmFormBase({ //street\r\n  //           label: \"Endereço\",\r\n  //           key: \"street\",\r\n  //           type: \"text\",\r\n  //           required: true,\r\n  //           order: 2,\r\n  //           size: 12\r\n  //         }),\r\n  //         new PrmFormBase({ //state\r\n  //           label: \"Estado\",\r\n  //           key: \"state\",\r\n  //           type: \"select\",\r\n  //           options: [{ key: \"bla\", value: \"blabla\" }],\r\n  //           required: true,\r\n  //           order: 3,\r\n  //           size: 4,\r\n  //         }),\r\n  //         new PrmFormBase({ //city\r\n  //           label: \"Cidade\",\r\n  //           key: \"city\",\r\n  //           type: \"select\",\r\n  //           options: [\r\n  //             {\r\n  //               key: \"Jaraguá do Sul\",\r\n  //               value: \"jgua\"\r\n  //             },\r\n  //             {\r\n  //               key: \"Capanema\",\r\n  //               value: \"capanema\"\r\n  //             }\r\n  //           ],\r\n  //           required: true,\r\n  //           order: 4,\r\n  //           size: 8\r\n  //         }),\r\n  //       ]\r\n  //     }),\r\n  //     new PrmFormBase({ //FormGroup / delivery_info\r\n  //       label: \"Entrega\",\r\n  //       key: \"delivery_info\",\r\n  //       type: \"nestedFormGroup\",\r\n  //       size: 12,\r\n  //       order: 10,\r\n  //       nestedQuestions: [\r\n  //         new PrmFormBase({ //delivery_tax\r\n  //           label: \"Taxa de entrega (região)\",\r\n  //           key: \"delivery_tax\",\r\n  //           type: \"number\",\r\n  //           required: true,\r\n  //           order: 1,\r\n  //           size: 12\r\n  //         }),\r\n  //         new PrmFormBase({ //min_delivery\r\n  //           label: \"Tempo minimo de entrega\",\r\n  //           key: \"min_delivery\",\r\n  //           type: \"number\",\r\n  //           required: true,\r\n  //           order: 2,\r\n  //           size: 6\r\n  //         }),\r\n  //         new PrmFormBase({ //max_delivery\r\n  //           label: \"Tempo maximo de entrega\",\r\n  //           key: \"max_delivery\",\r\n  //           type: \"number\",\r\n  //           required: true,\r\n  //           order: 3,\r\n  //           size: 6\r\n  //         })\r\n  //       ]\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"URL da logo da empresa\",\r\n  //       key: \"logo\",\r\n  //       type: \"text\",\r\n  //       inputMode: \"url\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 11\r\n  //     }),\r\n  //     new PrmFormBase({\r\n  //       label: \"Cor de fundo da logo\",\r\n  //       key: \"logo_bg\",\r\n  //       type: \"text\",\r\n  //       inputMode: \"url\",\r\n  //       required: true,\r\n  //       size: 12,\r\n  //       order: 12\r\n  //     })\r\n  //   ];\r\n\r\n  //   return companyFormArray;\r\n  // }\r\n\r\n  onSubmit(event: any) {\r\n    console.log(\">>> Form end: \");\r\n    console.log(event);\r\n  }\r\n\r\n  loadCountryData() {\r\n    // Set country values;\r\n    this.locationService.getBrazilCountry().subscribe(\r\n      (response) => {\r\n        let countryArray: any[] = [];\r\n        let orderedArray = response.body;\r\n\r\n        orderedArray.sort((obj1: any, obj2: any) => {\r\n          if (obj1.nome > obj2.nome) {\r\n            return 1;\r\n          }\r\n          if (obj1.nome < obj2.nome) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        });\r\n\r\n        orderedArray.forEach((element: any) => {\r\n          countryArray.push({\r\n            key: element.sigla,\r\n            value: element.nome\r\n          });\r\n        });\r\n\r\n        this.countryValues = countryArray;\r\n        \r\n        this.loadCityFromCountryData(countryArray[0].key);\r\n      }\r\n    );\r\n  }\r\n\r\n  loadCityFromCountryData(sigla: string) {\r\n    this.locationService.getStateCity(sigla).subscribe(\r\n      (response) => {\r\n        let cityArray: [any?] = [];\r\n        let orderedArray = response.body;\r\n\r\n        orderedArray.sort((obj1: any, obj2: any) => {\r\n          if (obj1.nome > obj2.nome) {\r\n            return 1;\r\n          }\r\n          if (obj1.nome < obj2.nome) {\r\n            return -1;\r\n          }\r\n          return 0;\r\n        });\r\n\r\n        orderedArray.forEach((element: any) => {\r\n          cityArray.push({\r\n            key: element.sigla,\r\n            value: element.nome\r\n          });\r\n        });\r\n\r\n        this.cityValues = cityArray;\r\n\r\n        this.baseQuestions = this.customerFormBuild();\r\n      }\r\n    );\r\n  }\r\n\r\n}\r\n","<div *ngIf=\"baseQuestions | async\" class=\"container mt-5 m-auto\">\r\n    <app-dynamic-form [questions]=\"baseQuestions\" (formOutput)=\"onSubmit($event)\"></app-dynamic-form>\r\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module"}